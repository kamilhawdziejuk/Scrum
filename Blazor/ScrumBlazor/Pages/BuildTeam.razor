@page "/buildteam"

@using System.Threading
@using ScrumBlazor.Data
@inject TeamsService TeamService

<h4>Log in to your team:</h4>
<br />

<p>
    Team Name: <input placeholder="Your team name" @bind="newTeam" />
    Password: <input placeholder="Your team password" @bind="newTeamPassword" type="password"/> 
    <button class="btn btn-primary" @onclick="(() => GetTeam())">Enter existing team</button>  
    <button class="btn btn-success" @onclick="(() => CreateTeam())">Register new team</button>
</p>
<label>@checkResult</label>

@if (team == null)
{
    <p><em></em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User Name</th>
                <th>Avarage Time</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var member in team.Members)
            {
                var val = @member.DailyAmount == 0 ? 0 : @member.SummaryTime / @member.DailyAmount;
                <tr>
                    <td>@member.Name</td>
                    <td>@val</td>
                    <td><button class="btn btn-danger" @onclick="(() => Remove(member.Id))">Remove</button></td>
                </tr>
            }
        </tbody>

    </table>

    <label>Add new team member:</label>
    <input placeholder="Member" @bind="newMember" />
    <button class="btn btn-success" @onclick="(() => Add())">Add member</button>
}

@code {

    Team team;
    string newMember;
    bool disabledTeamCreation = true;
    private string newTeam;
    private string newTeamPassword;
    private string checkResult;

    protected override async Task OnInitializedAsync()
    {
    }

    private void Remove(Guid id)
    {
        team = TeamService.RemoveMember(team, id);
        StateHasChanged();
    }

    private void CreateTeam()
    {
        if (string.IsNullOrWhiteSpace(newTeam) || string.IsNullOrWhiteSpace(newTeamPassword))
        {
            checkResult = "Please provide non-empty team name and password.";
            team = null;
        }
        else if (TeamService.GetTeam(newTeam) != null)
        {
            checkResult = "Team with a given name already exists. Please enter existing team with proper password.";
            team = null;
        }
        else
        {
            team = TeamService.CreateTeam(newTeam, newTeamPassword);
            checkResult = "Team created successfully!";
        }
        StateHasChanged();
    }

    private void GetTeam()
    {
        team = TeamService.GetTeam(newTeam, newTeamPassword);
        if (team == null)
        {
            checkResult = "Could not log in";
        }
        else
        {
            checkResult = "Logged in successfully!";
        }
        StateHasChanged();
    }

    private void Add()
    {
        team = TeamService.AddMember(team.Id, newMember);
        StateHasChanged();
    }

    private void CheckTeam()
    {
        if (!string.IsNullOrWhiteSpace(newTeam))
        {
            if (TeamService.CheckTeamAvailability(newTeam))
            {
                checkResult = "Team name available! You can create it now.";
                team = null;
                disabledTeamCreation = false;
            }
            else
            {
                team = TeamService.GetTeam(newTeam);
                checkResult = "Team exists";
                disabledTeamCreation = true;
            }
            StateHasChanged();
        }
    }
}

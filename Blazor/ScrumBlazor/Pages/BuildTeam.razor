@page "/buildteam"

@using System.Threading
@using ScrumBlazor.Data
@inject TeamsService TeamService

<h4>Build team:</h4>
<br />

<input placeholder="Check Team availability" @bind="newTeam" />
<button class="btn btn-primary" @onclick="(() => CheckTeam())">Check Name</button>
<label>@checkResult</label>


@if (team == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var member in team.Members)
            {
                <tr>
                    <td>@member.Name</td>
                    <td><button class="btn btn-primary" @onclick="(() => Remove(member.Id))">Remove</button></td>
                </tr>
            }
        </tbody>

    </table>

    <label>Add new team member:</label>
    <input placeholder="Member" @bind="newMember" />
    <button class="btn btn-primary" @onclick="(() => Add())">Add</button>
}

@code {

    Team team;
    string newMember;

    protected override async Task OnInitializedAsync()
    {
        //team = TeamService.GetTeam(newTeam);
        //StateHasChanged();
    }

    private string newTeam;
    private string checkResult;

    private void Remove(int id)
    {
        team = TeamService.RemoveMember(team, id);
        StateHasChanged();
    }

    private void Add()
    {
        team = TeamService.AddMember(team, newMember);
        StateHasChanged();
    }

    private void CheckTeam()
    {
        if (!string.IsNullOrWhiteSpace(newTeam))
        {
            if (TeamService.CheckTeamAvailability(newTeam))
            {
                checkResult = "Team does not exist";
            }
            else
            {
                team = TeamService.GetTeam(newTeam);
                checkResult = "Team exists";
            }
            StateHasChanged();
        }
    }
}

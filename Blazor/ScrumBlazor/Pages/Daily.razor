@page "/daily"

@using System.Threading
@using ScrumBlazor.Data
@inject DailyService DailyService
@inject TeamsService TeamsService
<h4>Daily meeting:</h4>
Team Name:
<input placeholder="Your team name" @bind="teamName" />
Password:
<input placeholder="Your team password" @bind="password" type="password" />
<button class="btn btn-primary" @onclick="(() => LogIn())">Enter team</button>
<label>@loginResult</label>
<hr/>
- What did you do  yesterday / since last daily?
<br />
- What will you do until the next one?
<br />
- Are there any impediments in your way?
<br/>
@if (participants == null)
{
<p><em></em></p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th>Action</th>
            <th>Team member</th>
            <th>Time elapsed</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var participant in participants)
            {
            <tr>
                <td class="@getClass(participant.Nr)"><button class="btn btn-primary" @onclick="(() => ChangeCurrentUser(participant.Nr))">Start</button></td>
                <td class="@getClass(participant.Nr)">@participant.Name</td>
                <td class="@getClass(participant.Nr)">@participant.Timer</td>
            </tr>
            }
    </tbody>
</table>


<button class="btn btn-warning" @onclick="(() => Reset())">Reset sequence</button>

<button class="btn btn-primary" @onclick="(() => Save())">Stop meeting and Save</button>
<hr />
<p>Time since start: @_timerSecondsCount sec.</p>
}

@code {

    string teamName;
    string password;
    string loginResult;
    Team team;

    Participant[] participants;
    int _currentUserNr = -1;
    Timer _updateTimer;
    int _timerSecondsCount = 0;

    public string getClass(int participantNr)
    {
        return (participantNr == _currentUserNr) ? "table-active" : "table-light";
    }

    protected override async Task OnInitializedAsync()
    {
    }

    public void Dispose()
    {
        _updateTimer.Dispose();
    }

    public void LoadTeam()
    {
        team = TeamsService.GetTeam(teamName);
    }

    public async Task Save()
    {
        if (team != null)
        {
            await _updateTimer.DisposeAsync();
            await TeamsService.Save(participants, team);
        }
    }

    public async Task LogIn()
    {
        team = TeamsService.GetTeam(teamName, password);
        if (team != null)
        {
            loginResult = "Correct credentials";
            participants = await DailyService.GetParticipants(team);
            _updateTimer = new Timer(state => { InvokeAsync(UpdateCounter); }, null, 0, 1000);
        }
        else
        {
            loginResult = "Wrong credentials";
            participants = null;
        }
        StateHasChanged();
    }

    public async void Reset()
    {
        participants = await DailyService.GetParticipants(team);
        for (int i = 0; i < participants.Length; i++)
        {
            participants[i].Timer = 0;
        }

        _currentUserNr = -1;
    }

    void ChangeCurrentUser(int userNrClicked)
    {
        _currentUserNr = userNrClicked;
    }

    async Task UpdateCounter()
    {
        _timerSecondsCount++;
        if (this._currentUserNr >= 0)
        {
            participants[_currentUserNr].Timer++;
        }
        StateHasChanged();
    }

}

@page "/estimate"

@using System.Threading
@using ScrumBlazor.Data
@inject DailyService DailyService
@inject TeamsService TeamsService
@inject EstimateService EstimateService
@implements IDisposable

<h4>Poker planning / PI voting meeting:</h4>
Team Name:
<input placeholder="Your team name" @bind="teamName" />
Password:
<input placeholder="Your team password" @bind="password" type="password" />
<button class="btn btn-primary" @onclick="(() => LogIn())">Enter team</button>
<label>@loginResult</label>
<hr />
<label>Join session and save your estimate to see other members estimations!</label>
<br />
<strong>Estimation values propositions:</strong>
<br />
- Story points (0, 0.5, 1, 2, 3, 5, 8, 13, 21, 34, 55, 100, ?)
<br />
- Fist of Five (0, 1, 2, 3, 4, 5)
<br />
<p>
    <strong>What to consider when estimating during Sprint Planning (acceptance criteria checklist):</strong><br />
    - complexity (how many components does this change affect? frontend/backend/DB etc.) <br />
    - unit tests involved? <br />
    - integration tests involved? <br />
    - translations changes involved? <br />
    - build scripts/CI changes involved? <br />
    - documentation updates involved? <br />
    etc.<br />

</p>
@if (participants == null)
{
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Starting</th>
                <th>Team member</th>
                <th>Estimation</th>
                <th>Saving</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var participant in participants)
            {
                <tr>
                    <td class="@getClass(participant.Nr)"><button class="btn btn-success" @onclick="(() => SetCurrentUser(participant.Nr))">Join</button></td>
                    <td class="@getClass(participant.Nr)">@participant.Name</td>
                    <td class="@getClass(participant.Nr)"><input size="11" placeholder="Estimate" @bind="@participant.Estimate" disabled="@participant.Disabled" /></td>
                    <td class="@getClass(participant.Nr)"><button class="btn btn-info" @onclick="(() => Save())">Save and refresh</button></td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-warning" @onclick="(() => Reset())">Reset estimates</button>
    <br />

    <hr />
    <p>Time since start: @_timerSecondsCount sec.</p>
}

<hr />

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>


@code {


    List<string> messages = new List<string>();
    protected override void OnInitialized()
    {
        EstimateService.Notify += OnNotify;

    }

    public void OnNotify()
    {
        if (!string.IsNullOrEmpty(EstimateService.User))
        {
            var encodedMsg = EstimateService.User + " says " + EstimateService.Message;
            messages.Add(encodedMsg);
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    /* ------------------ */


    string teamName;
    string password;
    string loginResult;
    Team team;

    Participant[] participants;
    int _currentUserNr = -1;
    Timer _updateTimer;
    int _timerSecondsCount = 0;

    public string getClass(int participantNr)
    {
        return (participantNr == _currentUserNr) ? "table-active" : "table-light";
    }

    protected override async Task OnInitializedAsync()
    {
    }

    public void Dispose()
    {
        if (_updateTimer != null)
        {

            _updateTimer.Dispose();
        }

        if (EstimateService != null)
        {
            EstimateService.Notify -= OnNotify;
        }
    }

    public async Task Save()
    {
        if (team != null)
        {
            EstimateService.Send(participants[_currentUserNr].Name, participants[_currentUserNr].Estimate);


            await TeamsService.Save(participants[_currentUserNr], team);
            team = TeamsService.GetTeam(teamName, password);
            participants = await DailyService.GetParticipants(team, false);
            StateHasChanged();
        }
    }

    public async Task LogIn()
    {
        StateHasChanged();
        team = TeamsService.GetTeam(teamName, password);
        if (team != null)
        {
            loginResult = "Correct credentials";
            participants = await DailyService.GetParticipants(team, false);
            foreach (var p in participants)
            {
                p.Joined = false;
                p.Estimate = "Not ready";
            }
            _updateTimer = new Timer(state => { InvokeAsync(UpdateCounter); }, null, 0, 1000);
            await TeamsService.SaveLoginTimeAmount(team.Id);
        }
        else
        {
            loginResult = "Wrong credentials";
            participants = null;
        }
        StateHasChanged();
    }

    public async Task Get()
    {
        team = TeamsService.GetTeam(teamName, password);
        if (team != null)
        {
            loginResult = "Correct credentials";
            participants = await DailyService.GetParticipants(team);
        }
        else
        {
            loginResult = "Wrong credentials";
            participants = null;
        }
        StateHasChanged();
    }

    public async void Reset()
    {
        participants = await DailyService.GetParticipants(team, false);
        foreach (var p in participants)
        {
            p.Timer = 0;
            p.Joined = false;
            p.Estimate = "Not ready";
        }

        await TeamsService.Save(participants, team);

        _currentUserNr = -1;
    }

    int calcJoined()
    {
        int joinedAmount = 0;
        for (int i = 0; i < this.participants.Length; i++)
        {
            if (this.participants[i].Joined)
            {
                joinedAmount++;
            }
        }
        return joinedAmount;
    }

    void SetCurrentUser(int userNrClicked)
    {
        if (calcJoined() > 0) return;

        if (!this.participants[userNrClicked].Joined)
        {
            _currentUserNr = userNrClicked;
            this.participants[userNrClicked].Joined = true;
            this.participants[userNrClicked].Estimate = "";

            EstimateService.User = this.participants[userNrClicked].Name;


            EstimateService.Send(EstimateService.User, "Joined");

            TeamsService.Save(this.participants[userNrClicked], team);
        }
        StateHasChanged();
    }

    async Task UpdateCounter()
    {
        _timerSecondsCount++;
        if (this._currentUserNr >= 0)
        {
            participants[_currentUserNr].Timer++;
        }
        StateHasChanged();
    }

}

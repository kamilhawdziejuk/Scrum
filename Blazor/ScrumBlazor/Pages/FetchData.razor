@page "/fetchdata"

@using System.Threading
@using ScrumBlazor.Data
@inject DailyService DailyService
@inject TeamsService TeamsService

Team Name: <input placeholder="Team Data" @bind="teamName" />
Password: <input placeholder="Team Data" @bind="password" /> 

<button class="btn btn-primary" @onclick="(() => LogIn())">Log in</button>
<label>@loginResult</label>
<br />
<br />
<hr />

Daily Timer since start: @_timerSecondsCount sec.
<br />
<br />
<h3>Agenda:</h3>
<br />
1. What did you do since last daily?
<br />
2. What will you do until the next one?
<br />
3. Are there any impediments in your way?
<br />
<br />
<br />

<h4>Team sequence generated now:</h4>
<br />

@if (participants == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User</th>
                <th>Time elapsed</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var participant in participants)
            {
            <tr>
                <td>@participant.Name</td>
                <td>@participant.Timer</td>
                <td><button class="btn btn-primary" @onclick="(() => ChangeCurrentUser(participant.Nr))">Start</button></td>
            </tr>
            }
        </tbody>

        <br />

        <button class="btn btn-warning" @onclick="(() => Reset())">Reset</button>
    </table>
}

@code {

    string teamName;
    string password;
    string loginResult;

    Team team;

    Participant[] participants;
    int _currentUserNr = -1;
    Timer _updateTimer;
    int _timerSecondsCount = 0;

    protected override async Task OnInitializedAsync()
    {
        //participants = await DailyService.GetParticipants(team);
        //_updateTimer = new Timer(state => { InvokeAsync(UpdateCounter); }, null, 0, 1000);
    }

    public void Dispose()
    {
        _updateTimer.Dispose();
    }

    public void LoadTeam()
    {
        team = TeamsService.GetTeam(teamName);
    }

    public async Task LogIn()
    {
        if (TeamsService.LogIn(teamName, password))
        {
            loginResult = "Fine";
            team = TeamsService.GetTeam(teamName);
            participants = await DailyService.GetParticipants(team);
            _updateTimer = new Timer(state => { InvokeAsync(UpdateCounter); }, null, 0, 1000);
        }
        else
        {
            loginResult = "Incorrect";
        }
        StateHasChanged();
    }

    public async void Reset()
    {
        participants = await DailyService.GetParticipants(team);
        for (int i = 0; i < participants.Length; i++)
        {
            participants[i].Timer = 0;
        }

        _currentUserNr = -1;
    }

    void ChangeCurrentUser(int userNrClicked)
    {
        _currentUserNr = userNrClicked;
    }

    async Task UpdateCounter()
    {
        _timerSecondsCount++;
        if (this._currentUserNr >= 0)
        {
            participants[_currentUserNr].Timer++;
        }
        StateHasChanged();
    }

}
